{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","serviceWorker.js","index.js"],"names":["module","exports","Metronome","props","startStop","state","playing","clearInterval","timer","setState","setInterval","playClick","bpm","count","beatsPerBar","click2","play","click1","handleBeatsPerBarChange","e","currentTarget","value","handleBpmChange","Audio","bind","this","className","type","onChange","min","max","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,sOCsI5BC,G,kBA/HX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAeVC,UAAY,WACJ,EAAKC,MAAMC,SACXC,cAAc,EAAKC,OACnB,EAAKC,SAAS,CACVH,SAAS,MAGb,EAAKE,MAAQE,YACT,EAAKC,UACJ,GAAK,EAAKN,MAAMO,IAAO,KAE5B,EAAKH,SACD,CACII,MAAO,EACPP,SAAS,GAEb,EAAKK,aAhCC,EAqClBA,UAAY,WAAO,IAAD,EACiB,EAAKN,MADtB,EACNQ,MADM,EACCC,cAEa,EACxB,EAAKC,OAAOC,OAEZ,EAAKC,OAAOD,OAGhB,EAAKP,UAAS,SAAAJ,GAAK,MAAK,CACpBQ,OAAQR,EAAMQ,MAAQ,GAAKR,EAAMS,iBA/CvB,EAmDlBI,wBAA0B,SAAAC,GAAM,IACpBP,EAAQ,EAAKP,MAAbO,IAEFE,EAAcK,EAAEC,cAAcC,MAEhC,EAAKhB,MAAMC,SAEXC,cAAc,EAAKC,OACnB,EAAKA,MAAQE,YAAY,EAAKC,UAAY,GAAKC,EAAO,KAGtD,EAAKH,SAAS,CACVI,MAAO,EACPC,iBAKJ,EAAKL,SAAS,CAAEK,gBAEpB,EAAKL,SAAS,CAAEK,iBAvEF,EA0ElBQ,gBAAkB,SAAAH,GACd,IAAMP,EAAMO,EAAEC,cAAcC,MAExB,EAAKhB,MAAMC,SAEXC,cAAc,EAAKC,OACnB,EAAKA,MAAQE,YAAY,EAAKC,UAAY,GAAKC,EAAO,KAGtD,EAAKH,SAAS,CACVI,MAAO,EACPD,SAIJ,EAAKH,SAAS,CAAEG,QAEpB,EAAKH,SAAS,CAAEG,SAxFhB,EAAKP,MAAQ,CACTC,SAAS,EACTO,MAAO,EACPD,IAAK,GACLE,YAAa,GAGjB,EAAKG,OAAS,IAAIM,MAAMN,KACxB,EAAKF,OAAS,IAAIQ,MAAMR,KAExB,EAAKO,gBAAkB,EAAKA,gBAAgBE,KAArB,gBAbT,E,sEA8FR,IAAD,EACiCC,KAAKpB,MAAnCC,EADH,EACGA,QAASM,EADZ,EACYA,IAAKE,EADjB,EACiBA,YAEtB,OACI,oCAEA,yBAAKY,UAAU,aACX,yCACA,yBAAKA,UAAU,eACX,gDACA,2BACIC,KAAK,SACLN,MAAQP,EACRc,SAAUH,KAAKP,2BAEvB,yBAAKQ,UAAU,cACX,+BAAQd,EAAR,QACA,2BACIe,KAAK,QACLE,IAAI,KACJC,IAAI,MACJT,MAAOT,EACPgB,SAAUH,KAAKH,mBAEvB,4BAAQS,QAASN,KAAKrB,WACrBE,EAAU,OAAS,e,GAzHZ0B,cCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9f2572b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\nimport click1 from './click1.wav';\nimport click2 from './click2.wav';\nimport './Metronome.css';\n\nclass Metronome extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = { \n            playing: false, \n            count: 0,\n            bpm: 60,\n            beatsPerBar: 8\n        }\n\n        this.click1 = new Audio(click1);\n        this.click2 = new Audio(click2);\n\n        this.handleBpmChange = this.handleBpmChange.bind(this);\n    }\n\n    startStop = () => {\n        if (this.state.playing) {\n            clearInterval(this.timer);\n            this.setState({\n                playing: false\n            });\n        } else {\n            this.timer = setInterval(\n                this.playClick,\n                (60 / this.state.bpm) * 1000\n            );\n            this.setState(\n                {\n                    count: 0,\n                    playing: true\n                },\n                this.playClick\n            );\n        }\n    }\n\n    playClick = () => {\n        const { count, beatsPerBar } = this.state;\n\n        if (count % beatsPerBar === 0) {\n            this.click2.play();\n        } else {\n            this.click1.play();\n        }\n\n        this.setState(state => ({\n            count: (state.count + 1) % state.beatsPerBar\n        }));\n    };\n\n    handleBeatsPerBarChange = e => { \n        const { bpm } = this.state;\n\n        const beatsPerBar = e.currentTarget.value;\n\n        if (this.state.playing) {\n            //stop old timer and start a new one \n            clearInterval(this.timer);\n            this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n\n            // set the new BPM and reset the beat counter\n            this.setState({\n                count: 0,\n                beatsPerBar\n            })\n\n        } else {\n            // otherwise just update the bpm\n            this.setState({ beatsPerBar });\n        }\n        this.setState({ beatsPerBar });\n    }\n\n    handleBpmChange = e => { \n        const bpm = e.currentTarget.value;\n\n        if (this.state.playing) {\n            //stop old timer and start a new one \n            clearInterval(this.timer);\n            this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n\n            // set the new BPM and reset the beat counter\n            this.setState({\n                count: 0,\n                bpm\n            })\n        } else {\n            // otherwise just update the bpm\n            this.setState({ bpm });\n        }\n        this.setState({ bpm });\n    }\n\n    render() {\n        const { playing, bpm, beatsPerBar } = this.state;\n    \n        return (\n            <>\n            \n            <div className=\"metronome\">\n                <h1>Metronome</h1>\n                <div className=\"beats-input\">\n                    <label>Beats per bar</label>\n                    <input\n                        type=\"number\"\n                        value={ beatsPerBar }\n                        onChange={this.handleBeatsPerBarChange} />\n                </div>\n                <div className=\"bpm-slider\">\n                    <label>{bpm} BPM</label>\n                    <input\n                        type=\"range\"\n                        min=\"60\"\n                        max=\"240\"\n                        value={bpm}\n                        onChange={this.handleBpmChange} />\n                    </div>\n                <button onClick={this.startStop}>\n                {playing ? 'Stop' : 'Start'}\n                </button>\n            </div>\n            </>\n            );\n        }\n}\n\nexport default Metronome;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './Metronome';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Metronome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}